@inherits ElementBase<Grid>

<style>
	/*
		Here's how this works: we need each grid element to have a containing div that
		clips contents to the boundary of its grid cell. To accomplish this, we have the
		containing div size itself to 100%, which should cause it to take its width and
		height right from the grid template specification. It then uses grid display
		itself, with one row and one column that take up the entirity of the containing
		div, so that it can align its child element correctly.
	*/
	.@UniqueClassCss {
		grid-row: @GridRowStartCss / span @GridRowSpanCss;
		grid-column: @GridColumnStartCss / span @GridColumnSpanCss;
		overflow: clip;
		box-sizing: border-box;
		width: 100%;
		height: 100%;
		min-width: 0;
		min-height: 0;
		display: grid;
		grid-template-rows: 100%;
		grid-template-columns: 100%;
	}

	.@UniqueClassCss > * {
		grid-row: 1;
		grid-column: 1;
		width: @ElementWidthCss;
		height: @ElementHeightCss;
		margin: @MarginCss;
		overflow: clip;
		box-sizing: border-box;
		justify-self: @HorizontalAlignmentCss;
		align-self: @VerticalAlignmentCss;
	}
</style>
<div class="@UniqueClassCss">
	@ChildContent
</div>

@code {

	[Parameter]
	public int Row
	{
		get;
		set;
	} = 0;

	[Parameter]
	public int Column
	{
		get;
		set;
	} = 0;

	[Parameter]
	public int RowSpan
	{
		get;
		set;
	} = 1;

	[Parameter]
	public int ColumnSpan
	{
		get;
		set;
	} = 1;

	protected override bool HorizontalStretch => HorizontalAlignment == HorizontalAlignment.Stretch && !Parent.IsColumnSizedToContent(Column, ColumnSpan);

	protected override bool VerticalStretch => VerticalAlignment == VerticalAlignment.Stretch && !Parent.IsRowSizedToContent(Row, RowSpan);

	int GridRowStartCss => Row + 1;

	int GridRowSpanCss => RowSpan;

	int GridColumnStartCss => Column + 1;

	int GridColumnSpanCss => ColumnSpan;
}
