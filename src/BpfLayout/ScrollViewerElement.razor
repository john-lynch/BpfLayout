@inherits ElementBase<ScrollViewer>

<style>
	.@UniqueClassCss {
		grid-row: 1;
		grid-column: 1;
		overflow: clip;
		box-sizing: border-box;
		width: @ElementWidthCss;
		height: @ElementHeightCss;
		min-width: @MinWidthCss;
		min-height: @MinHeightCss;
		justify-self: @HorizontalAlignmentCss;
		align-self: @VerticalAlignmentCss;
		margin: @MarginCss;
	}

	.@UniqueClassCss > * {
		width: @FillWidthCss;
		height: @FillHeightCss;
		min-width: @MinWidthCss;
		min-height: @MinHeightCss;
	}
</style>
<div class="@UniqueClassCss">
	@ChildContent
</div>

@code {

	protected override bool HorizontalStretch => HorizontalAlignment == HorizontalAlignment.Stretch && Parent.HorizontalScrollBarVisibility == ScrollBarVisibility.Disabled;

	protected override bool VerticalStretch => VerticalAlignment == VerticalAlignment.Stretch && Parent.VerticalScrollBarVisibility == ScrollBarVisibility.Disabled;

	protected override string HorizontalAlignmentCss => Parent.HorizontalScrollBarVisibility == ScrollBarVisibility.Disabled ? base.HorizontalAlignmentCss : "start";

	protected override string VerticalAlignmentCss => Parent.VerticalScrollBarVisibility == ScrollBarVisibility.Disabled ? base.VerticalAlignmentCss : "start";

	string MinWidthCss => Width is null && HorizontalAlignment == HorizontalAlignment.Stretch ? "100%" : "0px";

	string MinHeightCss => Height is null && VerticalAlignment == VerticalAlignment.Stretch ? "100%" : "0px";
}
